---
- name: Detect OS type
  ansible.builtin.raw: uname
  register: os_name
  changed_when: false

- name: Set NTP service and restart command based on OS
  set_fact:
    ntp_restart_cmd: >-
      {% if 'AIX' in os_name.stdout %}
        stopsrc -s xntpd; startsrc -s xntpd
      {% elif 'SunOS' in os_name.stdout %}
        svcadm restart ntp
      {% elif 'HP-UX' in os_name.stdout %}
        /sbin/init.d/xntpd restart
      {% else %}
        echo "Unsupported OS"
      {% endif %}
    ntp_config_path: "{{ ntp_conf_path }}"

- name: Check if NTP is already configured
  ansible.builtin.raw: grep -E '^server\s+' {{ ntp_conf_path }} || true
  register: ntp_config_check
  changed_when: false

- name: Fail if NTP is not configured at all
  ansible.builtin.fail:
    msg: "NTP is not configured (no server lines in {{ ntp_conf_path }})."
  when: ntp_config_check.stdout == ''

- name: Backup original NTP config
  ansible.builtin.raw: cp {{ ntp_conf_path }} {{ ntp_conf_path }}.bak_{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}

- name: Replace or append NTP server block
  ansible.builtin.raw: |
    awk '
    BEGIN {found=0}
    /^# BEGIN ANSIBLE MANAGED NTP SERVERS/ {found=1}
    /^# END ANSIBLE MANAGED NTP SERVERS/ {found=0; next}
    {if (!found) print}
    END {
      print "# BEGIN ANSIBLE MANAGED NTP SERVERS"
      {% for server in ntp_servers %}
      print "server {{ server }} iburst"
      {% endfor %}
      print "# END ANSIBLE MANAGED NTP SERVERS"
    }
    ' {{ ntp_conf_path }} > /tmp/ntp.conf && mv /tmp/ntp.conf {{ ntp_conf_path }}

- name: Restart NTP service
  ansible.builtin.raw: "{{ ntp_restart_cmd }}"
